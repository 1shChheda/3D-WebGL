First, the basics:
    - Creating a first scene
    - Adding objects
        > maybe a "cube", "donut", "sphere", etc
    - Choosing the right material
    - Adding textures
    - Animating everything

Then, traditional skills
    - Creating our own geometries (using code)
    - Adding lights and shadows
    - Interacting with 3D objects
    - Adding particles

Then, advanced techniques
    - Physics
    - Realistic renders
    - Writing custom shaders (VERY IMP.)
    - Adding post processing
    - Creating our own models with Blender

What is WebGL
    - Javascript API
    - you have access to properties, methods to create stuff
    - Result can be drawn in a <canvas>
    - uses the Graphic Processing Unit (GPU) of your PC to render high-performance graphics
        > when JS does normal maths 2+2, etc stuff -> uses CPU 
        > when drawing/rendering models -> uses GPU
    - can be used for 2D ("PixiJS") but will focus on 3D

    -> The CPU can do calculations really fast but one-by-one
        > NOT EXACTLY TRUE: nowadays multiple cores...each core take care of each application

    -> The GPU is a little slower but can do thousands of parallel calculations

    -> To draw a 3D model, the idea is to draw many triangles at the right position. let say 1000 triangles.
        > Each triangle includes 3 points.
        > When we want to render our model, the GPU will have to calculate the position of these 3000 points.
        > Because the GPU can do parallel calculations, it will handle all the triangles points in one raw.

    -> Once the points are placed, the GPU will draw each visible pixel of those triangles.
        > Yet again, the GPU will handle the thousands and thousands of pixels calculations in one go.

    -> The instructions to place the points and draw the pixels are written in what we call "shaders".
        > point positions, model transformations, camera coordinates, colorize things, etc

    -> Native WebGL is very hard (but gives good understanding of directly working with GPU to render stuff)

First Scene:
    - 4 elements to get started:
        > A scene that will contain objects
            -> Like a container
            -> We put objects, models, lights, etc in it
            -> At some point we ask Three.js to render that scene

        > Some objects
            -> now we have our Scene.
            -> We add/create object:
                _> Primitive geometries (cube, sylinder, sphere, etc)
                _> Imported models (get model files)
                _> Particles
                _> Lights
                _> etc....

            -> to create a visible object, we first need to create a "Mesh"
                _> A Mesh is the combination of a 'geometry' (the shape) and a 'material' (how it looks)
            -> so, now first, we create/select a "geometry"
            -> then we create/select a "mesh material"
            -> then we put them together inside a "Mesh" function
            -> and "add" this mesh to the scene

        > A camera
            -> Not actually visible
            -> Serves as a point of view when doing a render
            -> we can have multiple cameras and switch between them
            -> also, there are DIFFERENT TYPES

            -> BONUS: to understand camera and view frustum: "https://en.wikipedia.org/wiki/File:ViewFrustum.svg

            -> parameters:
                _> "Field of View" (fov)
                    > Vertical vision angle
                    > high value -> broader view (things stretch out)
                    > low value -> narrow view (zoomed in view)

                _> "Aspect Ratio"
                    > width of the render divided by the height of the render
                    > NOTE: we dont have a render yet, but we can decide on a size now

        > A renderer
            -> RENDER THE SCENE FROM THE CAMERA POV
            -> result drawn into a "canvas"

            -> either "You can create a canvas in HTML", OR "let Three.js do it"

            -> NOTE: to create <canvas> before loading the scripts

    - Transform an Object
        > when we want to move anything like "cube" or "camera" etc (anything we can manipulate)

        > parameters:
            _> position
                > has x, y, z properties
                > Three.js considers the forward/backward axis to be "z"
                > NOTE: the orientation of axis can be different. It all depends on the view of Camera
            _> rotation
            _> scale
                > When you scale an object, you are effectively multiplying its dimensions by the scale factor.
            _> quaternion

        > But which all objects/classes can we apply these properties on?
            -> All the classes that descend/inherit from the Object3D possess those properties like "PerspectiveCamera", "Mesh" etc.

            -> To checkout this inheritance, look at the top of Three.js documentation

        > IMP NOTE: you can change/play around with object properties ('position', 'rotation', etc) even after "adding" that object into the scene. 
            -> BUT!!! NOT AFTER "render"

        > "position" inherit from 'Vector3' which has many useful methods apart from just "x", "y", "z"

            example:
            _> mesh.position.length()
            _> mesh.position.distanceTo(camera.position)
            _> mesh.position.normalize()

        > "AxesHelper()": An axis object to visualize the 3 axes in a simple way. 

        > To ROTATE OBJECTS:
            > with "rotation" or with "quaternion"

            _> "rotation" inherit from 'Euler'

            _> "quaternion" is another way to represent rotation, which avoids gimbal lock
                > more mathematical way

        > "object.lookAt(new THREE.Vector3(0, -1, 0))"
            _> this rotates the object so that its "-z" faces the target you provided
            _> NOTE: target must be a Vector3

    - Scene Graph & Group
        > Use cases of Group:
            - Moving multiple objects together.
            - Organizing complex scenes.
            - Managing hierarchical transformations.
        
    - Animations
        - Animating is like doing stop motion
            > Move the object
            > Take a picture
            > Move the object a bit more
            > Take a picture
            > etc.

        - this is "FPS" (frames per second)

        - We need to update objects and do a render on each frame
        - We are going to do that in a function and call this function with: "window.requestAnimationFrame(...)"
        
        - IMP: to ensure smooth and consistent animation regardless of the frame rate...

            _> code:
                /* To estimate Frame rate */
                let time = Date.now();

                function animate() {
                    window.requestAnimationFrame(animate);

                    // to calculate the diff. between previousTime and currentTime
                    const currentTime = Date.now();
                    const deltaTime = currentTime - time;
                    time = currentTime;

                    mesh.rotation.z += 0.02 * deltaTime;
                    mesh.position.x -= 0.01 * deltaTime;

                    // NOW, RENDER!
                renderer.render(scene, camera); // arg: scene, camera
                }

                animate();
            
            > NOTE: we can also use "Clock" inbuilt Three.js for the same.

            > ex:
            - Imagine you want your cube to rotate 90 degrees per second. Hereâ€™s how deltaTime helps:

            - "Desired Rotation Speed": 90 degrees per second.
            - "Frame Rate": If the frame rate is 60 frames per second, each frame should rotate the cube by 90 / 60 = 1.5 degrees.
            - "Delta Time": If the actual frame rate drops to 30 frames per second, deltaTime will be larger, adjusting the rotation so that over one second, the cube still rotates 90 degrees.

            - so, if the FPS is high, the time between to consecutive frames is low, thus deltaTime is low, hence it will multiply with rotation accordingly, to adjust it so that it cube still rotates 90 deg. in 1 sec

            - in contrary, - so, if the FPS is low, the time between to consecutive frames is high, thus deltaTime is high, hence it will multiply with rotation accordingly, to adjust it so that it cube still rotates 90 deg. in 1 sec

            - thus it ADJUSTS THE ROTATIONS ACC. TO FPS, SO THAT ANIMATION BECOMES SMOOTH AND INVARIANT TO FPS


    - use of "GSAP":
        > to have more control over animation, create tweens, create timelines, etc.

        _> "gsap.to(target, vars)": Animates from the current state to the specified values.